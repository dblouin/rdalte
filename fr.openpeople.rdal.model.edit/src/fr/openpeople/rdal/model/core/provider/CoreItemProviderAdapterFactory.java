/*******************************************************************************
 * Copyright (c) 2011 Lab-STICC Universite de Bretagne Sud, Lorient.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the CeCILL-B license available
 * at :
 * en : http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
 * fr : http://www.cecill.info/licences/Licence_CeCILL-B_V1-fr.html
 * 
 * Contributors:
 * Dominique BLOUIN (Lab-STICC UBS), dominique.blouin@univ-ubs.fr
 ******************************************************************************/
/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package fr.openpeople.rdal.model.core.provider;

import fr.openpeople.rdal.model.core.util.CoreAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CoreItemProviderAdapterFactory extends CoreAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CoreItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.Specification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificationItemProvider specificationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.Specification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificationAdapter() {
		if (specificationItemProvider == null) {
			specificationItemProvider = new SpecificationItemProvider(this);
		}

		return specificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.Requirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementItemProvider requirementItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.Requirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementAdapter() {
		if (requirementItemProvider == null) {
			requirementItemProvider = new RequirementItemProvider(this);
		}

		return requirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.Assumption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssumptionItemProvider assumptionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.Assumption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssumptionAdapter() {
		if (assumptionItemProvider == null) {
			assumptionItemProvider = new AssumptionItemProvider(this);
		}

		return assumptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.VerificationActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerificationActivityItemProvider verificationActivityItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.VerificationActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerificationActivityAdapter() {
		if (verificationActivityItemProvider == null) {
			verificationActivityItemProvider = new VerificationActivityItemProvider(this);
		}

		return verificationActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.StakeHolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StakeHolderItemProvider stakeHolderItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.StakeHolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStakeHolderAdapter() {
		if (stakeHolderItemProvider == null) {
			stakeHolderItemProvider = new StakeHolderItemProvider(this);
		}

		return stakeHolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.RequirementsGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementsGroupItemProvider requirementsGroupItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.RequirementsGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementsGroupAdapter() {
		if (requirementsGroupItemProvider == null) {
			requirementsGroupItemProvider = new RequirementsGroupItemProvider(this);
		}

		return requirementsGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.RefExpressionCollectedModelElements} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefExpressionCollectedModelElementsItemProvider refExpressionCollectedModelElementsItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.RefExpressionCollectedModelElements}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefExpressionCollectedModelElementsAdapter() {
		if (refExpressionCollectedModelElementsItemProvider == null) {
			refExpressionCollectedModelElementsItemProvider = new RefExpressionCollectedModelElementsItemProvider(this);
		}

		return refExpressionCollectedModelElementsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.RefUserSelectedModelElements} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefUserSelectedModelElementsItemProvider refUserSelectedModelElementsItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.RefUserSelectedModelElements}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefUserSelectedModelElementsAdapter() {
		if (refUserSelectedModelElementsItemProvider == null) {
			refUserSelectedModelElementsItemProvider = new RefUserSelectedModelElementsItemProvider(this);
		}

		return refUserSelectedModelElementsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.ModelElementReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelElementReferenceItemProvider modelElementReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.ModelElementReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelElementReferenceAdapter() {
		if (modelElementReferenceItemProvider == null) {
			modelElementReferenceItemProvider = new ModelElementReferenceItemProvider(this);
		}

		return modelElementReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.Trace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceItemProvider traceItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.Trace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceAdapter() {
		if (traceItemProvider == null) {
			traceItemProvider = new TraceItemProvider(this);
		}

		return traceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.TraceModelElementReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceModelElementReferenceItemProvider traceModelElementReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.TraceModelElementReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceModelElementReferenceAdapter() {
		if (traceModelElementReferenceItemProvider == null) {
			traceModelElementReferenceItemProvider = new TraceModelElementReferenceItemProvider(this);
		}

		return traceModelElementReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.RequirementsCoverageData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementsCoverageDataItemProvider requirementsCoverageDataItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.RequirementsCoverageData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementsCoverageDataAdapter() {
		if (requirementsCoverageDataItemProvider == null) {
			requirementsCoverageDataItemProvider = new RequirementsCoverageDataItemProvider(this);
		}

		return requirementsCoverageDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.VerifiableElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerifiableElementItemProvider verifiableElementItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.VerifiableElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerifiableElementAdapter() {
		if (verifiableElementItemProvider == null) {
			verifiableElementItemProvider = new VerifiableElementItemProvider(this);
		}

		return verifiableElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.Uncertainty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UncertaintyItemProvider uncertaintyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.Uncertainty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUncertaintyAdapter() {
		if (uncertaintyItemProvider == null) {
			uncertaintyItemProvider = new UncertaintyItemProvider(this);
		}

		return uncertaintyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.SystemOverview} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemOverviewItemProvider systemOverviewItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.SystemOverview}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemOverviewAdapter() {
		if (systemOverviewItemProvider == null) {
			systemOverviewItemProvider = new SystemOverviewItemProvider(this);
		}

		return systemOverviewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.SystemContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemContextItemProvider systemContextItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.SystemContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemContextAdapter() {
		if (systemContextItemProvider == null) {
			systemContextItemProvider = new SystemContextItemProvider(this);
		}

		return systemContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.Actor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorItemProvider actorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.Actor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorAdapter() {
		if (actorItemProvider == null) {
			actorItemProvider = new ActorItemProvider(this);
		}

		return actorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.Interaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteractionItemProvider interactionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.Interaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteractionAdapter() {
		if (interactionItemProvider == null) {
			interactionItemProvider = new InteractionItemProvider(this);
		}

		return interactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.openpeople.rdal.model.core.Conflict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConflictItemProvider conflictItemProvider;

	/**
	 * This creates an adapter for a {@link fr.openpeople.rdal.model.core.Conflict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConflictAdapter() {
		if (conflictItemProvider == null) {
			conflictItemProvider = new ConflictItemProvider(this);
		}

		return conflictItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (verifiableElementItemProvider != null) verifiableElementItemProvider.dispose();
		if (specificationItemProvider != null) specificationItemProvider.dispose();
		if (requirementsGroupItemProvider != null) requirementsGroupItemProvider.dispose();
		if (requirementItemProvider != null) requirementItemProvider.dispose();
		if (assumptionItemProvider != null) assumptionItemProvider.dispose();
		if (verificationActivityItemProvider != null) verificationActivityItemProvider.dispose();
		if (stakeHolderItemProvider != null) stakeHolderItemProvider.dispose();
		if (refExpressionCollectedModelElementsItemProvider != null) refExpressionCollectedModelElementsItemProvider.dispose();
		if (refUserSelectedModelElementsItemProvider != null) refUserSelectedModelElementsItemProvider.dispose();
		if (modelElementReferenceItemProvider != null) modelElementReferenceItemProvider.dispose();
		if (traceItemProvider != null) traceItemProvider.dispose();
		if (traceModelElementReferenceItemProvider != null) traceModelElementReferenceItemProvider.dispose();
		if (requirementsCoverageDataItemProvider != null) requirementsCoverageDataItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (uncertaintyItemProvider != null) uncertaintyItemProvider.dispose();
		if (systemOverviewItemProvider != null) systemOverviewItemProvider.dispose();
		if (systemContextItemProvider != null) systemContextItemProvider.dispose();
		if (actorItemProvider != null) actorItemProvider.dispose();
		if (interactionItemProvider != null) interactionItemProvider.dispose();
		if (conflictItemProvider != null) conflictItemProvider.dispose();
	}

}
